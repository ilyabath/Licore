$("#btnExport").click(function() {
    for (var e = '<?xml version = "1.0" encoding="UTF-8" standalone="yes" ?>\n<arbre>\n', n = 0, o = competencesValidees.length; o > n; ++n) {
        var c = competencesValidees[n];
        e += "  <competence>\n       <id>" + c.idCompetence + "</id>\n       <nom>" + c.nomCompetence + "</nom>\n       <idPere>" + c.idPereCompetence + "</idPere>\n"
    }
    e += "</arbre>", $("#linkXML").click(function() {
        this.href = "data:application/xml;charset=utf-8," + encodeURIComponent(e)
    })
});

function genererBoutonGestion(e, n, t, o) {
    "use strict";
    var i = "";
    return i += "setCompetencesVisibles" === n || e.feuille && "setCompetencesInvisibles" === n ? ' <span id="competence-' + e.idCompetence + '-button-visibilite" data-toggle="modal"' : ' <span data-toggle="modal" data-target="#genericModal" data-type="' + n + '" data-id-competence="' + e.idCompetence + '" data-nom-competence="' + e.nomCompetence + '"', i += ' data-placement="top" data-original-title="' + t + '" class="glyphicon glyphicon-gestion cursor-pointer ' + o + '" aria-hidden="true"></span>'
}

function genererLigneCompetenceGestion(e, n) {
    "use strict";
    var t = "";
    return t += '<li id="competence-' + e.idCompetence + '"', void 0 === e.visible || e.visible || (t += ' class="couleur-grise"'), t += "display-none" === n ? ' style="display: none;">' : ">", t += '<a href="#" data-ref-competence="' + e.reference + '">' + e.reference + " : " + e.nomCompetence + "</a>", t += genererBoutonGestion(e, "ajouterCompetence", "Ajouter une compétence", "glyphicon-plus couleur-verte"), t += genererBoutonGestion(e, "ajouterPlusieursCompetences", "Ajouter plusieurs compétences", "glyphicon-th-list couleur-verte"), t += genererBoutonGestion(e, "modifierCompetence", "Modifier une compétence", "glyphicon-pencil couleur-jaune"), t += e.visible || void 0 === e.visible ? genererBoutonGestion(e, "setCompetencesInvisibles", "Rendre la compétence invisible", "glyphicon-eye-close couleur-bleue") : genererBoutonGestion(e, "setCompetencesVisibles", "Rendre la compétence visible", "glyphicon-eye-open couleur-bleue"), t += genererBoutonGestion(e, "supprimerCompetence", "Supprimer une compétence", "glyphicon-remove couleur-rouge")
}

function genererListeCompetences(e, n, t, o) {
    "use strict";
    var i = "",
        r = 0;
    n || r || (i += "\n<ul>\n");
    for (var c = 0, s = t.length; s > c; ++c) {
        var l = t[c];
        if (e === l.idPereCompetence) {
            if (n > r && (i += "\n<ul>\n"), "gestionCompetences" === o) {
                var p = {
                    idCompetence: l.idCompetence,
                    nomCompetence: l.nomCompetence,
                    reference: l.reference,
                    visible: l.visible,
                    feuille: l.feuille
                };
                i += genererLigneCompetenceGestion(p, "display-normal")
            }
            else i += '<li id="competence-' + l.idCompetence + '"', i += "valide" === l.etat ? ' class="couleur-text-valide">' : ' class="couleur-text-lien">', i += '<a href="#" data-ref-competence="' + l.reference + '">' + l.reference + " : " + l.nomCompetence + "</a>";
            r = n, i += genererListeCompetences(l.idCompetence, n + 1, t, o)
        }
    }
    return i += r === n && 0 !== r ? "</ul>\n</li>\n" : r === n ? "</ul>\n" : "</li>\n"
}

function majArbre(e) {
    "use strict";
    $(e).each(function() {
        $(this).treeview()
    })
}

function genererHistoriqueEchange(e, t) {
    var o = "";
    if (e.length > 0) {
        var i, a;
        o += '<label class="control-label" id="labelMessage">Historique des échanges :</label><div class="form-group scrollable">';
        for (var l = 0, r = e.length; r > l; ++l) {
            var n = e[l];
            null === n.idTuteur ? "Etudiant" === t ? (i = "Vous", a = "bleu") : (i = "Etudiant", a = "vert") : "Etudiant" === t ? (i = "Tuteur", a = "vert") : (i = "Vous", a = "bleu"), o += '<div class="panel panel-default"><div class="panel-heading ' + a + '"><h3 class="panel-title">' + i + " le " + n.date + " à " + n.heure + '</h3></div><div class="panel-body">', null !== n.commentaire && (o += n.commentaire), null !== n.nomFichier && (o += '<div class="form-group"><form class="form-horizontal" id="telechargement" method="post" action="index.php?action=telechargement-fichier"><input type="hidden" id="nomFichier" name="nomFichier" value="' + n.nomFichier + '"/><input type="hidden" id="nomFichierOrigine" name="nomFichierOrigine" value="' + n.nomFichierOrigine + '"/><label for="buttonSubmitFichier" class="control-label" id="labelFichier">Récupérer le fichier ' + n.nomFichierOrigine + '</label>&nbsp; <input type="submit" class="btn btn-primary" id="buttonSubmitFichier" name="buttonSubmitFichier" value="Télécharger le fichier"></form></div>'), o += "</div></div>"
        }
        o += "</div>"
    }
    return o
}
$("#genericModal").on("show.bs.modal", function(e) {
    "use strict";
    var t = $("#buttonSubmit");
    $(this).removeData("modal"), t.off();
    var o = $(e.relatedTarget),
        i = o[0].dataset.idCompetence,
        a = o[0].dataset.nomCompetence,
        l = o[0].dataset.type,
        r = $(this),
        n = function(e) {
            r.find(".modal-body #genericModalForm").empty(), r.find(".modal-title").text(e.title), r.find(".modal-body #genericModalForm").append(e.body), r.find(".modal-body #label").text(e.label), r.find(".modal-body #nomCompetence").val(e.nomCompetence)
        },
        s = {};
    switch (l) {
        case "ajouterCompetence":
            s.title = 'Ajouter une compétence à "' + a + '"', s.body = '<div class="form-group"><label for="nom-competence" class="control-label" id="label"></label><input type="text" class="form-control" id="nomCompetence"></div><div class="form-group"><label for="definition" class="control-label" id="labelDefinition">Définition de la compétence :</label><textarea rows="8" class="form-control" id="definition"></textarea></div><div class="form-group"><label for="criteres" class="control-label" id="labelCritere">Critères pour la validation :</label><textarea rows="8" class="form-control" id="criteres"></textarea></div>', s.label = "Nom de la nouvelle compétence :", s.nomCompetence = "";
            break;
        case "ajouterPlusieursCompetences":
            s.title = 'Ajouter des compétences à "' + a + '"', s.body = '<div class="form-group"><label for="nom-competence" class="control-label" id="label"></label><textarea rows="20" class="form-control" id="nomCompetence"></textarea></div>', s.label = "Nom des nouvelles compétences (séparées par un retour à la ligne) :", s.nomCompetence = "";
            break;
        case "modifierCompetence":
            $.getJSON("api/competences.php", {
                type: "getCriteresEtDefinitionCompetence",
                idCompetence: i
            }).always(function(e) {
                s.title = 'Modifier la compétence "' + a + '"', s.body = '<div class="form-group"><label for="nom-competence" class="control-label" id="label"></label><input type="text" class="form-control" id="nomCompetence"></div><div class="form-group"><label for="definition" class="control-label" id="labelDefinition">Définition de la compétence :</label><textarea rows="8" class="form-control" id="definition">' + e.definition + '</textarea></div><div class="form-group"><label for="criteres" class="control-label" id="labelCritere">Critères pour la validation :</label><textarea rows="8" class="form-control" id="criteres">' + e.criteres + "</textarea></div>", s.label = "Nom :", s.nomCompetence = a, n(s)
            });
            break;
        case "supprimerCompetence":
            var c = o.data("feuille");
            s.label = "", s.nomCompetence = a, c ? (s.title = 'Supprimer la compétence "' + a + '"', s.body = '<div class="alert alert-danger" role="alert"><strong>Attention!</strong><p>Voulez-vous vraiment continuer et supprimer cette compétence ?</p></div>') : (s.title = 'Supprimer la catégorie "' + a + '" et ses sous-compétences', s.body = '<div class="alert alert-danger" role="alert"><strong>Attention!</strong><p>La suppression de cette catégorie entrainera la suppression de toutes ses sous-catégories et compétences.</p><p>Voulez-vous vraiment continuer et supprimer cette catégorie ?</p></div>');
            break;
        case "setCompetencesInvisibles":
            s.label = "", s.nomCompetence = a, s.title = 'Rendre invisible la catégorie "' + a + '" et ses sous-compétences', s.body = '<div class="alert alert-warning" role="alert"><strong>Attention!</strong><p>Rendre invisible cette catégorie va mettre invisible toutes ses sous-catégories et compétences.</p><p>Voulez-vous vraiment continuer et rendre invisible cette catégorie ?</p></div>';
            break;
        case "validerCompetence":
            s.body = "", $.getJSON("api/competences.php", {
                type: "getExplications",
                idCompetence: i
            }, function(e) {
                s.body = genererHistoriqueEchange(e, "Etudiant"), s.label = "Explications pour justifier la validation de cette compétence :", s.nomCompetence = a, s.title = 'Validation de la compétence "' + a + '"', s.body += '<div class="alert alert-warning" role="alert"><strong>Attention!</strong><p>Vous allez valider une compétence et celle ci sera donc mise en attente de validation par un tuteur. Voulez vous continuer ?</p></div><div class="form-group"><label for="explications-validation" class="control-label" id="label"></label><textarea rows="10" class="form-control" id="explicationsValidation"></textarea></br><label for="fichierUpload" class="control-label" id="label2">Joindre un fichier</label><input type="file" id="fichierUpload" name="fichier"></div>', n(s), $(function() {
                    var e = $(".scrollable").prop("scrollHeight");
                    $(".scrollable").scrollTop(e)
                })
            });
            break;
        case "invaliderCompetence":
            s.label = "", s.nomCompetence = a, s.title = 'Invalidation de la compétence "' + a + '"', s.body = '<div class="alert alert-warning" role="alert"><strong>Attention!</strong><p>Vous allez invalider une compétence et celle ci sera donc retiré de votre liste de compétences validées. Voulez vous continuer ?</p></div>';
            break;
        case "invaliderCompetenceTemporaire":
            s.label = "", s.nomCompetence = a, s.title = 'Invalidation de la compétence "' + a + '"', s.body = '<div class="alert alert-warning" role="alert"><strong>Attention!</strong><p>Vous allez retirer une compétence actuellement en attente de validation par un tuteur. Voulez vous continuer ?</p></div>';
            break;
        case "invalidationCompetencesUtilisateurs":
            var d = o[0].dataset.nomUtilisateur;
            s.label = "", s.nomCompetence = "", s.title = 'Invalider la compétence "' + a + '" pour "' + d + '"', s.body = '<div class="alert alert-warning" role="alert"><strong>Attention!</strong><p>Vous allez invalider cette compétence pour ' + d + ". Voulez vous continuer ?</p></div>";
            break;
        case "supprimer-utilisateur-groupe":
            var u = o[0].dataset.nomGroupe,
                p = o[0].dataset.idGroupe,
                m = o[0].dataset.prenomUtilisateur,
                b = o[0].dataset.nomUtilisateur,
                v = o[0].dataset.idUtilisateur;
            s.label = "", s.nomCompetence = "", s.title = "Supprimer l'étudiant " + m + " " + b + " du groupe " + u, s.body = '<div class="alert alert-warning" role="alert"><strong>Attention!</strong><p>Vous allez supprimer l\'étudiant du groupe. Voulez vous continuer ?</p></div>';
            break;
        case "nouveau-utilisateur-groupe":
            var u = o[0].dataset.nomGroupe,
                p = o[0].dataset.idGroupe,
                m = o[0].dataset.prenomUtilisateur,
                b = o[0].dataset.nomUtilisateur,
                v = o[0].dataset.idUtilisateur;
            s.label = "", s.nomCompetence = "", s.title = "Ajouter l'étudiant " + m + " " + b + " au groupe " + u, s.body = '<div class="alert alert-warning" role="alert"><strong>Attention!</strong><p>Vous allez ajouter l\'étudiant au groupe. Voulez vous continuer ?</p></div>';
            break;
        case "role-utilisateur":
            var g = o[0].dataset.nomRole,
                f = o[0].dataset.idRole,
                d = o[0].dataset.nomUtilisateur,
                v = o[0].dataset.idUtilisateur;
            s.label = "", s.nomCompetence = "", s.title = "Changer le rôle de l'utilisateur " + d + " en " + g, s.body = '<div class="alert alert-warning" role="alert"><strong>Attention!</strong><p>Vous allez changer le rôle de l\'utilisateur. Voulez vous continuer ?</p></div>'
    }
    n(s);
    var h = {};
    "validerCompetence" === l || "invaliderCompetence" === l || "invaliderCompetenceTemporaire" === l ? (h = {
        idCompetence: i,
        nomCompetence: a,
        type: l
    }, t.click(h, buttonSubmitValidation)) : "supprimer-utilisateur-groupe" === l || "nouveau-utilisateur-groupe" === l ? (h = {
        idGroupe: p,
        idUtilisateur: v,
        nomGroupe: u,
        prenom: m,
        nom: b,
        type: l
    }, t.click(h, buttonSubmitValidation)) : "role-utilisateur" === l ? (h = {
        idUtilisateur: v,
        idRole: f,
        type: l
    }, t.click(h, buttonSubmitValidation)) : (h = {
        idCompetence: i,
        type: l
    }, t.click(h, buttonSubmitGestionCompetences))
});

function setCompetencesVisibilite(e, t) {
    "use strict";
    for (var n = 0, i = e.length; i > n; ++n) {
        var o = e[n];
        if ("setCompetencesInvisibles" === t) {
            $("#competence-" + o.idCompetence).toggleClass("couleur-grise"), $("#competence-" + o.idCompetence).find("span.glyphicon-eye-close").remove(), $("#competence-" + o.idCompetence).find("span.glyphicon-eye-open").remove(), $("#competence-" + o.idCompetence).find("span.glyphicon-pencil").after(genererBoutonGestion(o, "setCompetencesVisibles", "Rendre la compétence visible", "glyphicon-eye-open couleur-bleue"));
            var c = {
                idCompetence: o.idCompetence,
                nomCompetence: o.nomCompetence,
                visibilite: "setCompetencesVisibles"
            };
            $("#competence-" + o.idCompetence + "-button-visibilite").off(), $("#competence-" + o.idCompetence + "-button-visibilite").click(c, setCompetencesVisibiliteOnClick)
        } else $("#competence-" + o.idCompetence).toggleClass("couleur-grise"), $("#competence-" + o.idCompetence).find("span.glyphicon-eye-open").first().remove(), $("#competence-" + o.idCompetence).find("span.glyphicon-pencil").first().after(genererBoutonGestion(o, "setCompetencesInvisibles", "Rendre la compétence invisible", "glyphicon-eye-close couleur-bleue")), $("#competence-" + o.idCompetence + "-button-visibilite").off()
    }
}

function setCompetencesVisibiliteOnClick(e) {
    "use strict";
    var t = e.data.idCompetence,
        n = e.data.visibilite;
    $.getJSON("api/competences.php", {
        type: n,
        idCompetence: t
    }).always(function(e) {
        $(".tooltip").remove(), setCompetencesVisibilite(e, n), $('[data-toggle="modal"]').tooltip()
    })
}

function majButtons(e) {
    "use strict";
    $buttonSelectionne.removeClass("active"), e.addClass("active"), $buttonSelectionne = e
}

function majArbreGestionCompetences(e, t) {
    "use strict";
    var n = $(e);
    typeAffichageCompetences = t, $buttonSelectionne.selector !== n.selector && (majButtons(n), $("#arbreGestionCompetences").empty(), $("#arbreGestionCompetences").hide(), $("#loader-competences").show(), $.getJSON("api/competences.php", {
        type: t
    }).always(function(e) {
        if ("" !== e.responseText) {
            $("#arbreGestionCompetences").append('<li id="listeCompetences"><a href="#" data-ref-competence="C">Liste des compétences</a>'), $("#listeCompetences").append(genererListeCompetences(0, 0, e, "gestionCompetences")), majArbre("#arbreGestionCompetences"), $('[data-toggle="modal"]').tooltip();
            for (var t = 0, n = e.length; n > t; ++t) {
                var i = e[t];
                if (i.feuille) {
                    var o;
                    o = i.visible || void 0 === i.visible ? "setCompetencesInvisibles" : "setCompetencesVisibles";
                    var c = {
                        idCompetence: i.idCompetence,
                        nomCompetence: i.nomCompetence,
                        visibilite: o
                    };
                    $("#competence-" + i.idCompetence + "-button-visibilite").click(c, setCompetencesVisibiliteOnClick)
                }
            }
            e.length <= 0 ? ($("#search-bar-competence").hide(), $("#search-competence").hide()) : ($("#search-bar-competence").show(), $("#search-competence").show()), $("#loader-competences").hide(), $("#arbreGestionCompetences").show()
        }
    }))
}

function buttonSubmitGestionCompetences(e) {
    "use strict";
    var t = e.data.idCompetence,
        n = e.data.type,
        i = $("#genericModal").find(".modal-body #nomCompetence").val(),
        o = $("#genericModal").find(".modal-body #definition").val(),
        c = $("#genericModal").find(".modal-body #criteres").val();
    $.getJSON("api/competences.php", {
        type: n,
        idCompetence: t,
        nomCompetence: i,
        definition: o,
        criteres: c
    }).always(function(e) {
        if (e) {
            var o = function(e) {
                if ("" !== t) var n = $("#competence-" + t);
                else var n = $("#listeCompetences");
                var i = n.find("ul").length,
                    o = n.find("i").hasClass("glyphicon-chevron-down");
                0 === i && n.append("<ul>");
                for (var c = 0, s = e.length; s > c; ++c) {
                    var p = e[c];
                    if (-1 !== p.idCompetence) {
                        o ? n.find("ul").first().append(genererLigneCompetenceGestion(p, "display-normal")) : n.find("ul").first().append(genererLigneCompetenceGestion(p, "display-none"));
                        var m;
                        m = p.visible ? "setCompetencesInvisibles" : "setCompetencesVisibles";
                        var a = {
                            idCompetence: p.idCompetence,
                            nomCompetence: p.nomCompetence,
                            visibilite: m
                        };
                        $("#competence-" + p.idCompetence + "-button-visibilite").off(), $("#competence-" + p.idCompetence + "-button-visibilite").click(a, setCompetencesVisibiliteOnClick)
                    }
                }
                0 === i && ($("#competence-" + t).append("</ul>"), actualiserBranche($("#competence-" + t)), $("#competence-" + t).find("i").removeClass("glyphicon-chevron-right"), $("#competence-" + t).find("i").addClass("glyphicon-chevron-down"))
            };
            switch (n) {
                case "ajouterCompetence":
                    -1 !== e.idCompetence && o([e]);
                    break;
                case "ajouterPlusieursCompetences":
                    o(e);
                    break;
                case "modifierCompetence":
                    e.retour && ($("#competence-" + t).find("span.glyphicon-plus").first().attr("data-nom-competence", i), $("#competence-" + t).find("span.glyphicon-th-list").first().attr("data-nom-competence", i), $("#competence-" + t).find("span.glyphicon-pencil").first().attr("data-nom-competence", i), $("#competence-" + t).find("span.glyphicon-eye-close").first().attr("data-nom-competence", i), $("#competence-" + t).find("span.glyphicon-eye-open").first().attr("data-nom-competence", i), $("#competence-" + t).find("span.glyphicon-remove").first().attr("data-nom-competence", i), $("#competence-" + t).find("a").first().empty(), $("#competence-" + t).find("a").first().append(reference + " : " + i));
                    break;
                case "setCompetencesInvisibles":
                    setCompetencesVisibilite(e, "setCompetencesInvisibles");
                    break;
                case "supprimerCompetence":
                    $("#competence-" + t).remove();
                    break;
                default:
                    $.getJSON("api/competences.php", {
                        type: typeAffichageCompetences
                    }).always(function(e) {
                        $("#arbreGestionCompetences").empty(), $("#arbreGestionCompetences").append('<li id="listeCompetences"><a href="#">Liste des compétences</a>'), $("#listeCompetences").append(genererListeCompetences(0, 0, e, "gestionCompetences")), majArbre("#arbreGestionCompetences"), $('[data-toggle="modal"]').tooltip()
                    })
            }
        }
    })
}
var $buttonSelectionne = $("#buttonToutesCompetences"),
    typeAffichageCompetences = "getToutesLesCompetences";
$("#buttonToutesCompetences").click(function() {
    "use strict";
    majArbreGestionCompetences("#buttonToutesCompetences", "getToutesLesCompetences")
}), $("#buttonCompetencesVisibles").click(function() {
    "use strict";
    majArbreGestionCompetences("#buttonCompetencesVisibles", "getCompetencesVisibles")
}), $("#buttonCompetencesInvisibles").click(function() {
    "use strict";
    majArbreGestionCompetences("#buttonCompetencesInvisibles", "getCompetencesInvisibles")
});

function envoyerFormulaire(e) {
    var t = e.data.ok;
    t === !1 && e.preventDefault()
}

function remplirListeDeroulante(e, t) {
    "use strict";
    "composantes" === e ? $.getJSON("api/competences.php", {
        type: "getComposantes"
    }, function(e) {
        for (var i = 0, o = e.length; o > i; ++i) {
            var r = e[i];
            t === r.id ? $("#listeComposante").append('<option value="' + r.id + '" selected>' + r.nom + "</option>") : $("#listeComposante").append('<option value="' + r.id + '">' + r.nom + "</option>")
        }
    }) : "Tuteur" === e || "Encadrant" === e ? $.getJSON("api/competences.php", {
        type: "getUtilisateursParRole",
        role: e
    }, function(i) {
        for (var o = 0, r = i.length; r > o; ++o) {
            var u = i[o];
            t === u.id ? $("#liste" + e).append('<option value="' + u.id + '" selected>' + u.prenom + " " + u.nom + "</option>") : $("#liste" + e).append('<option value="' + u.id + '">' + u.prenom + " " + u.nom + "</option>")
        }
    }) : "groupes" === e && $.getJSON("api/competences.php", {
        type: "getGroupes"
    }, function(e) {
        for (var t = 0, i = e.length; i > t; ++t) {
            var o = e[t];
            $("#listeGroupe").append('<option value="' + o.id + '">' + o.nom + "</option>")
        }
    })
}

function afficherUtilisateursGroupe(e) {
    "use strict";
    var t = e.data.idGroupe,
        i = e.data.nomGroupe;
    $("#groupe").show(), $("#etudiant").show(), $.getJSON("api/competences.php", {
        type: "getUtilisateursGroupe",
        idGroupe: t
    }, function(e) {
        $.getJSON("api/competences.php", {
            type: "getNbUtilisateurGroupe",
            idGroupe: t
        }, function(o) {
            taille = o.taille, nbUtilisateur = o.nbUtilisateur, $("#nomGroupe").text(i), $("#panel-body-groupe").empty(), $("#panel-body-groupe").append('<div id="headGroupe" class="list-group-item heading">Etudiants du groupe (' + nbUtilisateur + "/" + taille + ')</div><div id="etudiants-groupe" class="list-group"></div>');
            for (var r = 0, u = e.length; u > r; ++r) {
                var p = e[r],
                    n = {
                        idUtilisateur: p.id,
                        prenomUtilisateur: p.prenom,
                        nomUtilisateur: p.nom,
                        idGroupe: t,
                        nomGroupe: i
                    };
                $("#etudiants-groupe").append(genererListGroupItem(n, "", "supprimer-utilisateur-groupe", "Retirer l'étudiant du groupe", "glyphicon-remove", !0)), $("#utilisateur-" + p.id).tooltip()
            }
            if (taille > nbUtilisateur) {
                $("#panel-body-etudiants").show(), $("#panel-body-etudiants").empty(), $("#panel-body-etudiants").append('<div class="list-group-item heading">Rechercher de nouveaux étudiants pour le groupe « ' + i + ' »</div><input id="search-bar-etudiant" type="search" class="input-md form-control" placeholder="Recherche d\'un étudiant"><div id="nouveaux-utilisateurs" class="list-group"></div>');
                var a = {
                    idGroupe: t,
                    nomGroupe: i
                };
                $("#search-bar-etudiant").keyup(a, chercherUtilisateur)
            } else $("#panel-body-etudiants").hide()
        })
    })
}

function majNombreUtilisateurs(e) {
    $.getJSON("api/competences.php", {
        type: "getNbUtilisateurGroupe",
        idGroupe: e
    }, function(e) {
        $("#headGroupe").text("Etudiants du groupe (" + e.nbUtilisateur + "/" + e.taille + ")")
    })
}

function chercherUtilisateur(e) {
    "use strict";
    var t = $(this).val(),
        i = e.data.idGroupe,
        o = e.data.nomGroupe;
    t.length > 0 ? $.getJSON("api/competences.php", {
        type: "getEtudiantsSansGroupe",
        nomEtudiant: t
    }, function(e) {
        var t, r = e.length;
        if (t = r > 1 ? "Etudiants" : "Etudiant", $("#nouveaux-utilisateurs").empty(), r > 0)
            for (var u = 0, p = r; p > u; ++u) {
                var n = e[u],
                    a = {
                        idUtilisateur: n.idUtilisateur,
                        prenomUtilisateur: n.prenom,
                        nomUtilisateur: n.nom,
                        idGroupe: i,
                        nomGroupe: o
                    };
                $("#nouveaux-utilisateurs").append(genererListGroupItem(a, "", "nouveau-utilisateur-groupe", "Ajouter l'étudiant au groupe", "glyphicon-plus", !0)), $("#utilisateur-" + n.idUtilisateur).tooltip()
            } else $("#nouveaux-utilisateurs").append('<a class="list-group-item"><em>Aucun utilisateur ne correspond à la recherche</em></a>')
    }) : $("#nouveaux-utilisateurs").empty()
}

function afficherGroupes() {
    "use strict";
    var e, t, i = $("#search-bar-groupe").val();
    i.length > 0 ? (e = "getGroupesRecherche", t = "Aucun groupe ne correspond à la recherche") : (e = "getGroupes", t = "Il n'existe aucun groupe"), $.getJSON("api/competences.php", {
        type: e,
        nomGroupe: i
    }, function(e) {
        var i = e.length;
        if ($("#listeGroupes").empty(), i > 0)
            for (var o = 0, r = i; r > o; ++o) {
                var u = e[o];
                $("#listeGroupes").append('<div id="list-group-item-' + u.id + '" class="list-group-item cursor-pointer"><div class="media"><div class="media-body">' + u.nom + "</div></div>");
                var p = {
                    idGroupe: u.id,
                    nomGroupe: u.nom
                };
                $("#list-group-item-" + u.id).click(p, afficherUtilisateursGroupe)
            } else $("#listeGroupes").append('<a class="list-group-item"><em>' + t + "</em></a>")
    })
}
var idGroupe = void 0,
    taille, nbUtilisateur;
$("#buttonCreationGroupe").click(function() {
    document.location.href = "index.php?action=gestion-groupes"
}), $("#buttonModifierGroupe").click(function() {
    document.location.href = "index.php?action=gestion-groupes&choix=modifier-groupe"
}), $("#buttonGererGroupe").click(function() {
    document.location.href = "index.php?action=gestion-groupes&choix=gerer-groupe"
}), $("#btnCreerGroupe").click(function(e) {
    "use strict";
    var t = $("#nomGroupe").val(),
        i = $("#cleGroupe").val(),
        o = $("#tailleGroupe").val(),
        r = $("#listeComposante").val(),
        u = $("#listeTuteur").val(),
        p = $("#listeEncadrant").val();
    null !== t && "" !== t && null !== i && "" !== i && null !== o && "" !== o && null !== r && null !== u && null !== p && (e.preventDefault(), void 0 === idGroupe ? $.getJSON("api/competences.php", {
        type: "creerUnGroupe",
        nom: t,
        cle: i,
        taille: o,
        idComposante: r,
        idTuteur: u,
        idEncadrant: p
    }, function(e) {
        $("#creerGroupe").submit({
            ok: e.ok
        }, envoyerFormulaire), $("#creerGroupe").submit()
    }) : $.getJSON("api/competences.php", {
        type: "modifierUnGroupe",
        idGroupe: idGroupe,
        nom: t,
        cle: i,
        taille: o,
        idComposante: r,
        idTuteur: u,
        idEncadrant: p
    }).always(function(e) {
        $("#creerGroupe").submit({
            ok: e.ok
        }, envoyerFormulaire), $("#creerGroupe").submit()
    }))
}), $("#revelerMdp").click(function() {
    "password" === $("#cleGroupe").attr("type") ? $("#cleGroupe").attr("type", "text") : $("#cleGroupe").attr("type", "password")
}), $("#listeGroupe").change(function() {
    idGroupe = $("#listeGroupe").val();
    var e = location.search.split("choix=")[1],
        t = location.search.split("action=")[1];
    "modifier-groupe" === e ? ($.getJSON("api/competences.php", {
        type: "getGroupe",
        idGroupe: idGroupe
    }, function(e) {
        $("#nomGroupe").val(e.nom), $("#cleGroupe").val(e.cle), $("#tailleGroupe").val(e.taille), remplirListeDeroulante("composantes", e.idComposante), remplirListeDeroulante("Tuteur", e.idTuteur), remplirListeDeroulante("Encadrant", e.idEncadrant)
    }), $("#creerGroupe").show()) : "rejoindre-groupe" === t && $("#formRejoindregroupe").show()
}), $("#btnRejoindreGroupe").click(function() {
    var e = $("#cleGroupe").val(),
        t = $("#listeGroupe").val();
    $.getJSON("api/competences.php", {
        type: "rejoindreUnGroupe",
        idGroupe: t,
        cle: e
    }).always(function(e) {
        e.res ? document.location.href = "index.php" : ($("#erreurMdp").text("Mot de passe erroné"), $("#erreurMdp").css("color", "red"), $("#erreurMdp").fadeIn().delay(2e3).fadeOut())
    })
});

function afficherRoleUtilisateur(e) {
    "use strict";
    var i = e.data.idUtilisateur,
        t = e.data.nom,
        a = e.data.prenom;
    $.getJSON("api/competences.php", {
        type: "getRolesUtilisateur",
        idUtilisateur: i
    }, function(e) {
        $("#panel-body-roles").empty(), $("#panel-body-roles").append('<div class="list-group-item heading">Rôle de ' + a + " " + t + '</div><div id="utilisateur-roles" class="list-group"></div>');
        for (var l = 0, r = e.length; r > l; ++l) {
            var s = e[l];
            s.roleUtilisateur === !0 ? $("#utilisateur-roles").append('<div id="list-group-item-role-' + s.idRole + '" class="list-group-item couleur-valide-bg"data-toggle="" data-target="#genericModal" data-type="role-utilisateur"data-nom-role="' + s.nomRole + '" data-id-role="' + s.idRole + '" data-nom-utilisateur="' + a + " " + t + '" data-id-utilisateur="' + i + '">' + s.nomRole + "</div>") : $("#utilisateur-roles").append('<div id="list-group-item-role-' + s.idRole + '" class="list-group-item cursor-pointer"data-toggle="modal" data-target="#genericModal" data-type="role-utilisateur"data-nom-role="' + s.nomRole + '" data-id-role="' + s.idRole + '" data-nom-utilisateur="' + a + " " + t + '" data-id-utilisateur="' + i + '">' + s.nomRole + "</div>")
        }
    })
}
$("#search-bar").keyup(function() {
    "use strict";
    var e = $(this).val();
    e.length > 0 ? $.getJSON("api/competences.php", {
        type: "getUtilisateurs",
        nomUtilisateur: e
    }, function(i) {
        var t, a = i.length;
        if (t = a > 1 ? "Utilisateurs" : "Utilisateur", $("#panel-body-utilisateurs").empty(), $("#panel-body-utilisateurs").append('<div class="list-group-item heading">' + t + " correspondant à la recherche « " + e + ' »</div><div id="utilisateurs-gestion" class="list-group"></div>'), a > 0)
            for (var l = 0, r = a; r > l; ++l) {
                var t = i[l];
                $("#utilisateurs-gestion").append('<a href="#" id="utilisateur-' + t.idUtilisateur + '" class="list-group-item">' + t.prenom + " " + t.nom + "</a>");
                var s = {
                    idUtilisateur: t.idUtilisateur,
                    nom: t.nom,
                    prenom: t.prenom
                };
                $("#utilisateur-" + t.idUtilisateur).click(s, afficherRoleUtilisateur)
            } else $("#utilisateurs-gestion").append('<a class="list-group-item"><em>Aucun utilisateur ne correspond à la recherche</em></a>')
    }) : $("#panel-body-utilisateurs").empty()
});

function cliquerSurLaCompetence(e) {
    -1 !== e.indexOf(".") ? (nouvelleRef = e.substring(0, e.lastIndexOf(".")), cliquerSurLaCompetence(nouvelleRef)) : e.length > 1 && cliquerSurLaCompetence(e[0]);
    var c = $('[data-ref-competence="' + e + '"]').prev(".tree-indicator");
    (c.hasClass("glyphicon-chevron-right") || void 0 === c.attr("class")) && $('[data-ref-competence="' + e + '"]').click()
}
$("#search-competence").click(function() {
    var e = $("#search-bar-competence").val(),
        c = location.search.split("action=")[1];
    "" != e && (e = e.toUpperCase(), "C" !== e[0] && (e = "C" + e), $('[data-ref-competence="' + e + '"]').length ? cliquerSurLaCompetence(e) : c || $.getJSON("api/competences.php", {
        type: "estUneCompetenceFeuille",
        reference: e
    }, function(c) {
        c.res && (nouvelleRef = e.substring(0, e.lastIndexOf(".")), cliquerSurLaCompetence(nouvelleRef))
    }))
});

function actualiserBranche(i) {
    "use strict";
    i.prepend('<i class="tree-indicator glyphicon glyphicon-chevron-right"></i>'), i.addClass("tree-branch"), i.on("click", function(i) {
        if (this == i.target) {
            var e = $(this).children("i:first");
            e.toggleClass("glyphicon-chevron-down glyphicon-chevron-right"), $(this).children().children().toggle()
        }
    }), i.children().children().toggle(), i.children(".tree-indicator, button, a").click(function(e) {
        i.click(), e.preventDefault()
    })
}
$.fn.extend({
    treeview: function() {
        return this.each(function() {
            var i = $(this);
            i.addClass("treeview-tree"), i.find("li").each(function() {
                $(this)
            }), i.find("li").has("ul").each(function() {
                actualiserBranche($(this))
            })
        })
    }
});

function genererListGroupItem(e, t, i, a, o, r) {
    "use strict";
    var l, n, d, p = "";
    return "validationCompetenceParTuteur" === i || "invalidationCompetencesUtilisateurs" === i || "supprimer-utilisateur-groupe" === i || "nouveau-utilisateur-groupe" === i ? (l = e.idUtilisateur, n = e.prenomUtilisateur + " " + e.nomUtilisateur, d = "") : (l = e.idCompetence, n = e.nomCompetence, d = e.reference), p = '<div id="list-group-item-' + l + '" class="list-group-item cursor-pointer ' + t + '" data-toggle="modal" ', r ? (p += "validationCompetenceParTuteur" === i ? 'data-target="#validationUtilisateursModal"' : 'data-target="#genericModal"', p += "supprimer-utilisateur-groupe" === i || "nouveau-utilisateur-groupe" === i ? ' data-type="' + i + '" data-id-groupe="' + e.idGroupe + '" data-nom-groupe="' + e.nomGroupe : ' data-type="' + i + '" data-id-competence="' + e.idCompetence + '" data-nom-competence="' + e.nomCompetence) : p += 'data-target="#connexionModal"', "validationCompetenceParTuteur" !== i && "supprimer-utilisateur-groupe" !== i && "nouveau-utilisateur-groupe" !== i || (p += '" data-nom-utilisateur="' + e.nomUtilisateur + '" data-id-utilisateur="' + l + '"data-prenom-utilisateur="' + e.prenomUtilisateur), p += '"><div class="media"><div class="media-body">', "" !== d && (p += '<span class="encadrement">' + d + " :</span>"), p += n, "valide" === e.etat ? p += '<div><hr class="separation-competence">Validée par ' + e.prenomTuteur + " " + e.nomTuteur + " le " + e.dateValidation + "</div>" : "invalide" === e.etat && (p += '<div><hr class="separation-competence"><p>Validation refusée par ' + e.prenomTuteur + " " + e.nomTuteur + " le " + e.dateValidation + "</p><p>Cliquez sur la compétence pour afficher l'explication</p></div>"), p += '</div><div class="media-right media-middle">', p += "validationCompetenceParTuteur" === i || "invalidationCompetencesUtilisateurs" === i || "supprimer-utilisateur-groupe" === i || "nouveau-utilisateur-groupe" === i ? ' <span id="utilisateur-' : ' <span id="competence-', p += l + '" data-toggle="modal" data-placement="top" data-original-title="' + a + '" class="glyphicon cursor-pointer ' + o + '" aria-hidden="true"></span></div></div>'
}

function buttonSubmitValidation(e) {
    "use strict";
    var t, i, a = e.data.idCompetence,
        o = (e.data.nomCompetence, e.data.type);
    "accepterValidation" === o || "refuserValidation" === o || "nouveau-utilisateur-groupe" === o ? (t = e.data.idUtilisateur, i = $("#list-group-item-" + t)) : i = $("#list-group-item-" + a), $(".tooltip").remove();
    var r = function() {
        i.removeAttr("data-target"), i.removeAttr("data-toggle"), i.removeAttr("data-original-title"), i.removeAttr("data-id-utilisateur"), i.removeAttr("data-nom-utilisateur"), i.removeAttr("data-id-competence"), i.removeAttr("data-nom-competence"), i.removeAttr("data-type"), i.removeAttr("title"), i.removeClass("cursor-pointer"), i.find("span.glyphicon").first().remove()
    };
    if ("validerCompetence" === o) uploadFichier(a, 0), i.attr("data-type", "invaliderCompetenceTemporaire"), i.toggleClass("couleur-attente-bg"), i.removeClass("couleur-invalide-bg"), i.removeClass("couleur-text-invalide"), i.find("span.glyphicon").first().toggleClass("glyphicon-ok"), i.find("span.glyphicon").first().toggleClass("glyphicon-hourglass"), i.find("span.glyphicon-hourglass").first().attr("data-original-title", "Compétence en attente de validation"), i.find("div.media-body").find("div").first().remove();
    else if ("invaliderCompetenceTemporaire" === o) $.getJSON("api/competences.php", {
        type: "invalidation",
        idCompetence: a
    }), i.attr("data-type", "validerCompetence"), i.toggleClass("couleur-attente-bg"), i.find("span.glyphicon").first().toggleClass("glyphicon-ok"), i.find("span.glyphicon").first().toggleClass("glyphicon-hourglass"), i.find("span.glyphicon-ok").first().attr("data-original-title", "Valider la compétence");
    else if ("invaliderCompetence" === o) $.getJSON("api/competences.php", {
        type: "invalidation",
        idCompetence: a
    }), i.attr("data-type", "validerCompetence"), i.toggleClass("couleur-valide-bg"), i.find("span.glyphicon").first().toggleClass("glyphicon-ok"), i.find("span.glyphicon").first().toggleClass("glyphicon-remove"), i.find("span.glyphicon-ok").first().attr("data-original-title", "Valider la compétence"), i.find("div.media-body").find("div").first().remove();
    else if ("accepterValidation" === o) $.getJSON("api/competences.php", {
        type: "accepterValidation",
        idCompetence: a,
        idUtilisateur: t
    }), r(), i.toggleClass("couleur-attente-bg"), i.toggleClass("couleur-valide-bg");
    else if ("refuserValidation" === o) uploadFichier(a, t), r(), i.toggleClass("couleur-attente-bg"), i.toggleClass("couleur-invalide-bg"), i.toggleClass("couleur-text-invalide");
    else if ("nouveau-utilisateur-groupe" === o) {
        var l = e.data.idGroupe,
            n = e.data.nomGroupe,
            d = e.data.nom,
            p = e.data.prenom;
        $.getJSON("api/competences.php", {
            type: "ajouterAuGroupe",
            idGroupe: l,
            idUtilisateur: [t]
        }, function(e) {
            if (e.res) {
                $("#list-group-item-" + t).remove();
                var i = {
                    idUtilisateur: t,
                    nomUtilisateur: d,
                    prenomUtilisateur: p,
                    idGroupe: l,
                    nomGroupe: n
                };
                $("#etudiants-groupe").append(genererListGroupItem(i, "", "supprimer-utilisateur-groupe", "Retirer l'étudiant du groupe", "glyphicon-remove", !0)), $("#utilisateur-" + t).tooltip(), majNombreUtilisateurs(l)
            }
        })
    } else if ("supprimer-utilisateur-groupe" === o) {
        var l = e.data.idGroupe,
            n = e.data.nomGroupe,
            t = e.data.idUtilisateur;
        $.getJSON("api/competences.php", {
            type: "supprimerDuGroupe",
            idGroupe: l,
            idUtilisateur: [t]
        }, function() {
            $("#list-group-item-" + t).remove(), majNombreUtilisateurs(l), $("#panel-body-etudiants").show(), $("#panel-body-etudiants").empty(), $("#panel-body-etudiants").append('<div class="list-group-item heading">Rechercher de nouveaux étudiants pour le groupe « ' + n + ' »</div><input id="search-bar-etudiant" type="search" class="input-md form-control" placeholder="Recherche d\'un étudiant"><div id="nouveaux-utilisateurs" class="list-group"></div>');
            var e = {
                idGroupe: l,
                nomGroupe: n
            };
            $("#search-bar-etudiant").keyup(e, chercherUtilisateur)
        })
    } else if ("role-utilisateur" === o) {
        var t = e.data.idUtilisateur,
            s = e.data.idRole;
        $.getJSON("api/competences.php", {
            type: "changerRoleUtilisateur",
            idUtilisateur: t,
            idRole: s
        }), $(".couleur-valide-bg").attr("data-toggle", "modal"), $(".couleur-valide-bg").addClass("cursor-pointer"), $(".couleur-valide-bg").removeClass("couleur-valide-bg"), $("#list-group-item-role-" + s).removeClass("cursor-pointer"), $("#list-group-item-role-" + s).addClass("couleur-valide-bg"), $("#list-group-item-role-" + s).attr("data-toggle", "")
    }
}

function afficherCompetence(e) {
    "use strict";
    var t, i = e.data.idCompetence,
        a = e.data.nomCompetence,
        o = e.data.type;
    null !== $lienPrecedent && ($lienPrecedent.toggleClass("couleur-text-selection"), $lienPrecedent.toggleClass("couleur-text-lien")), $lienPrecedent = $("#competence-" + i), $lienPrecedent.toggleClass("couleur-text-lien"), $lienPrecedent.toggleClass("couleur-text-selection"), $.getJSON("api/competences.php", {
        type: "estConnecte"
    }, function(e) {
        t = e.estConnecte, "sousCompetences" === o ? $.getJSON("api/competences.php", {
            type: "sousCompetences",
            idPere: i
        }, function(e) {
            $("#panel-body-competences").empty(), $("#panel-body-competences").append('<div class="list-group-item heading">' + a + '</div><div id="competences-a-valider" class="list-group"></div>');
            for (var i = 0, o = e.length; o > i; ++i) {
                var r = e[i];
                "attente" === r.etat ? $("#competences-a-valider").append(genererListGroupItem(r, "couleur-attente-bg", "invaliderCompetenceTemporaire", "Compétence en attente de validation", "glyphicon-hourglass", t)) : "valide" === r.etat ? $("#competences-a-valider").append(genererListGroupItem(r, "couleur-valide-bg", "invaliderCompetence", "Invalider la compétence", "glyphicon-remove", t)) : "invalide" === r.etat ? $("#competences-a-valider").append(genererListGroupItem(r, "couleur-invalide-bg couleur-text-invalide", "validerCompetence", "Valider la compétence", "glyphicon-ok", t)) : $("#competences-a-valider").append(genererListGroupItem(r, "", "validerCompetence", "Valider la compétence", "glyphicon-ok", t))
            }
            $('[data-toggle="modal"]').tooltip()
        }).fail(function(e, t, i) {
            console.error("getJSON failed, status: " + t + ", error: " + i)
        }) : $.getJSON("api/competences.php", {
            type: "getUtilisateursCompetence",
            idCompetence: i
        }, function(e) {
            $("#panel-body-etudiants").empty(), $("#panel-body-etudiants").append('<div class="list-group-item heading">' + a + '</div><div id="utilisateurs-a-valider" class="list-group"></div>');
            for (var t = 0, o = e.length; o > t; ++t) {
                var r = e[t],
                    l = {
                        idCompetence: i,
                        nomCompetence: a,
                        idUtilisateur: r.idUtilisateur,
                        prenomUtilisateur: r.prenom,
                        nomUtilisateur: r.nom
                    };
                $("#utilisateurs-a-valider").append(genererListGroupItem(l, "couleur-attente-bg", "validationCompetenceParTuteur", "Valider l'étudiant", "glyphicon-hourglass", !0))
            }
            $('[data-toggle="modal"]').tooltip()
        }).fail(function(e, t, i) {
            console.error("getJSON failed, status: " + t + ", error: " + i)
        })
    })
}

function uploadFichier(e, t) {
    var i, a = $("#fichierUpload").val();
    $("#fichierUpload").upload("./models/upload.php", function(o) {
        "0" != o && (i = o), 0 === t ? $.getJSON("api/competences.php", {
            type: "validation",
            idCompetence: e,
            explications: $("#genericModal").find(".modal-body #explicationsValidation").val(),
            nomFichier: i,
            nomFichierOrigine: a
        }) : $.getJSON("api/competences.php", {
            type: "refuserValidation",
            idCompetence: e,
            idUtilisateur: t,
            explications: $("#validationUtilisateursModal").find(".modal-body #explicationsValidation").val(),
            nomFichier: i,
            nomFichierOrigine: a
        })
    }, "html")
}
$("#validationUtilisateursModal").on("show.bs.modal", function(e) {
    "use strict";
    var t = $("#buttonAccepter"),
        i = $("#buttonRefuser");
    $(this).removeData("modal"), t.off(), i.off();
    var a, o, r = $(e.relatedTarget),
        l = r[0].dataset.idCompetence,
        n = r[0].dataset.nomCompetence,
        d = r[0].dataset.idUtilisateur,
        p = r[0].dataset.nomUtilisateur,
        s = r[0].dataset.prenomUtilisateur,
        u = $(this);
    $.getJSON("api/competences.php", {
        type: "getCriteresEtDefinitionCompetence",
        idCompetence: l
    }).always(function(e) {
        o = e.definition, a = e.criteres, $.getJSON("api/competences.php", {
            type: "getExplications",
            idCompetence: l,
            idUtilisateur: d
        }, function(e) {
            var t = "";
            t = genererHistoriqueEchange(e, "Tuteur"), "" !== o && (t += '<div class="form-group"><label class="control-label" id="labelDefinition">Définition de la compétence :</label><div>' + o + "</div></div>"), "" !== a && (t += '<div class="form-group"><label class="control-label" id="labelCritere">Critères pour la validation :</label><textarea rows="8" class="form-control" id="criteres" readonly>' + a + "</textarea></div>"), t += '<div class="form-group"><label for="explications-validation" class="control-label" id="label"></label><textarea rows="10" class="form-control" id="explicationsValidation"></textarea></div>', t += '<div class="form-group"><label for="fichierUpload" class="control-label" id="labelJoindre">Joindre un fichier</label><input type="file" id="fichierUpload" name="fichier"></div>', u.find(".modal-body #validationUtilisateursModalForm").empty(), u.find(".modal-title").text('Valider la compétence "' + n + '" pour "' + s + " " + p + '"'), u.find(".modal-body #validationUtilisateursModalForm").append(t), u.find(".modal-body #label").text("En cas de refus, expliquez la raison pour que l'étudiant puisse savoir ce qu'il doit améliorer :"), $(function() {
                var e = $(".scrollable").prop("scrollHeight");
                $(".scrollable").scrollTop(e)
            })
        })
    });
    var c = {
        idCompetence: l,
        nomCompetence: n,
        idUtilisateur: d,
        type: "accepterValidation"
    };
    t.click(c, buttonSubmitValidation);
    var m = {
        idCompetence: l,
        nomCompetence: n,
        idUtilisateur: d,
        type: "refuserValidation"
    };
    i.click(m, buttonSubmitValidation)
});
var $lienPrecedent = null;

function changerNavActive(e) {
    $("#navbar-ul").removeClass("active"), $("#navbar-" + e).addClass("active")
}

function $_GET(e) {
    var t = {};
    return window.location.href.replace(location.hash, "").replace(/[?&]+([^=&]+)=?([^&]*)?/gi, function(e, i, o) {
        t[i] = void 0 !== o ? o : ""
    }), e ? t[e] ? t[e] : null : t
}
var competencesValidees;

$(window).on("load", function() {
    "use strict";
    var e = location.search.split("action=")[1];
    if (e)
        if ("gestion-competences" === e) changerNavActive(e), $("#arbreGestionCompetences").empty(), $("#arbreGestionCompetences").hide(), $('[data-toggle="tooltip"]').tooltip(), $.getJSON("api/competences.php", {
            type: "getToutesLesCompetences"
        }).always(function(e) {
            var t = {
                idCompetence: "",
                nomCompetence: "Liste des compétences",
                reference: ""
            };
            if ($("#arbreGestionCompetences").append('<li id="listeCompetences"><a href="#" data-ref-competence="C">Liste des compétences</a>' + genererBoutonGestion(t, "ajouterCompetence", "Ajouter une compétence", "glyphicon-plus couleur-verte")), "" !== e.responseText) {
                $("#listeCompetences").append(genererListeCompetences(0, 0, e, "gestionCompetences")), majArbre("#arbreGestionCompetences"), $('[data-toggle="modal"]').tooltip();
                for (var i = 0, o = e.length; o > i; ++i) {
                    var s = e[i];
                    if (void 0 !== s.visible && !s.visible || s.feuille && s.visible) {
                        var n;
                        n = s.feuille && s.visible ? "setCompetencesInvisibles" : "setCompetencesVisibles";
                        var t = {
                            idCompetence: s.idCompetence,
                            nomCompetence: s.nomCompetence,
                            visibilite: n
                        };
                        $("#competence-" + s.idCompetence + "-button-visibilite").click(t, setCompetencesVisibiliteOnClick)
                    }
                }
            }
            e.length <= 0 && ($("#search-bar-competence").hide(), $("#search-competence").hide()), $("#loader-competences").hide(), $("#arbreGestionCompetences").show()
        });
        else if ("valider-competences-utilisateurs" === e) changerNavActive(e), $("#listeCompetences").empty(), $("#arbreValidationCompetences").hide(), $.getJSON("api/competences.php", {
        type: "getCompetencesValidation"
    }).always(function(e) {
        if (e.length > 0) {
            $("#listeCompetences").append('<a href="#" data-ref-competence="C">Liste des compétences</a>'), $("#listeCompetences").append(genererListeCompetences(0, 0, e, "afficherCompetences")), majArbre("#arbreValidationCompetences");
            for (var t = 0, i = e.length; i > t; ++t) {
                var o = e[t];
                if (o.feuille) {
                    var s = {
                        idCompetence: o.idCompetence,
                        nomCompetence: o.nomCompetence,
                        type: "getUtilisateursCompetence"
                    };
                    $("#competence-" + o.idCompetence).find("a").first().click(s, afficherCompetence)
                }
            }
        } else $("#loader-competences").after("Aucuns étudiants à valider"), $("#search-bar-competence").hide(), $("#search-competence").hide();
        $("#loader-competences").hide(), $("#arbreValidationCompetences").show()
    });
    else if ("gestion-utilisateurs" === e) changerNavActive(e);
    else if ("gestion-groupes" === e || "gestion-groupes&choix=modifier-groupe" === e || "gestion-groupes&choix=gerer-groupe" === e) {
        var t = location.search.split("choix=")[1];
        idGroupe = void 0, void 0 === t ? ($(".active").removeClass("active"), $("#buttonCreationGroupe").addClass("active"), remplirListeDeroulante("composantes", 0), remplirListeDeroulante("Tuteur", 0), remplirListeDeroulante("Encadrant", 0)) : "modifier-groupe" === t ? ($("#creerGroupe").hide(), $(".active").removeClass("active"), $("#buttonModifierGroupe").addClass("active"), remplirListeDeroulante("groupes", 0), $("#btnCreerGroupe").text("Modifier le groupe")) : "gerer-groupe" === t && ($(".active").removeClass("active"), $("#buttonGererGroupe").addClass("active"), $("#groupe").hide(), $("#etudiant").hide(), $("#panel-body-groupes").append('<div class="list-group-item heading">Liste des groupes</div><input id="search-bar-groupe" type="search" class="input-md form-control" placeholder="Recherche d\'un groupe"><div id="listeGroupes" class="list-group"></div>'), $("#search-bar-groupe").keyup(afficherGroupes), afficherGroupes()), changerNavActive("gestion-groupes")
    } else if ("rejoindre-groupe" === e) changerNavActive(e), remplirListeDeroulante("groupes", 0), $("#listeGroupe").css("width", "+=200"), $("#labelGroupe").css("margin-left", "+=60"), $("#cleGroupe").css("width", "+=125"), $("#labelCle").css("margin-left", "+=60"), $("#labelCheckBox").css("margin-left", "+=110"), $("#formRejoindregroupe").hide(), $("#erreurMdp").hide();
    else if ("exportHtml" === $_GET("action")) {
        var i = $_GET("prenom"),
            o = $_GET("nom");
        $.getJSON("api/competences.php", {
            type: "getIdEtudiant",
            prenom: i,
            nom: o
        }).always(function(e) {
            $.getJSON("api/competences.php", {
                type: "getCompetencesValides",
                id: e.id
            }, function(e) {
                e.length > 0 ? (competencesValidees = e, $("#arbreListeCompetencesValidees").append('<li id="listeCompetencesValidees"><a href="#">Liste des compétences validées</a>'), $("#listeCompetencesValidees").append(genererListeCompetences(0, 0, e, "afficherCompetences")), majArbre("#arbreListeCompetencesValidees")) : $("#panel-body-competences-validees").append("<p>Aucunes compétences validées</p>"), $("#loader-competences-validees").hide(), $("#arbreListeCompetencesValidees").show()
            })
        })
    } else "mon-groupe" === e && (changerNavActive(e), $.getJSON("api/competences.php", {
        type: "getInfosSurLeGroupe"
    }, function(e) {
        $("#spanNom").text(e.nom), $("#spanTuteur").text(e.nomTuteur), $("#spanEnseignant").text(e.nomEnseignant)
    }), $.getJSON("api/competences.php", {
        type: "getUtilisateursGroupe"
    }, function(e) {
        for (var t = 0, i = e.length; i > t; ++t) {
            var o = e[t];
            $("#panel-body-etudiant-groupe").append('<div id="list-group-item-' + o.id + '" class="list-group-item"><div class="media"><div class="media-body">' + o.prenom + " " + o.nom + '</div><div class="media-right media-middle"><a href="index.php?action=exportHtml&prenom=' + o.prenom + "&nom=" + o.nom + "&ident=" + o.id + '" target="_blank"><span id="utilisateur-' + o.id + '"data-placement="top"data-original-title="Lien vers le licore de ' + o.prenom + " " + o.nom + '"class="glyphicon cursor-pointer glyphicon-link"aria-hidden="true"></span></a></div></div></div>'), $("[data-original-title]").tooltip()
        }
    }));
    else changerNavActive("mes-competences"), $("#listeCompetences").empty(), $("#arbreListeCompetences").hide(), $('[data-toggle="tooltip"]').tooltip(), $.getJSON("api/competences.php", {
        type: "getCompetencesVisiblesSansFeuilles"
    }).always(function(e) {
        $("#listeCompetences").append('<a href="#" data-ref-competence="C">Liste des compétences</a>'), $("#listeCompetences").append(genererListeCompetences(0, 0, e, "afficherCompetences")), majArbre("#arbreListeCompetences");
        for (var t = 0, i = e.length; i > t; ++t) {
            var o = e[t],
                s = {
                    idCompetence: o.idCompetence,
                    nomCompetence: o.nomCompetence,
                    reference: o.reference,
                    type: "sousCompetences"
                };
            $("#competence-" + o.idCompetence).find("a").first().click(s, afficherCompetence)
        }
        e.length <= 0 && ($("#search-bar-competence").hide(), $("#search-competence").hide()), $("#loader-competences").hide(), $("#arbreListeCompetences").show()
    }), $.getJSON("api/competences.php", {
        type: "estConnecte"
    }, function(e) {
        var t = e.estConnecte;
        t && ($("#listeCompetencesValidees").empty(), $("#arbreListeCompetencesValidees").hide(), $.getJSON("api/competences.php", {
            type: "getCompetencesValides"
        }).always(function(e) {
            e.length > 0 ? (competencesValidees = e, $("#arbreListeCompetencesValidees").append('<li id="listeCompetencesValidees"><a href="#">Liste des compétences validées</a>'), $("#listeCompetencesValidees").append(genererListeCompetences(0, 0, e, "afficherCompetences")), majArbre("#arbreListeCompetencesValidees")) : $("#panel-body-competences-validees").append("<p>Aucunes compétences validées</p>"), $("#loader-competences-validees").hide(), $("#arbreListeCompetencesValidees").show()
        }))
    })
});
